{"version":3,"sources":["watering.gif","logo.svg","Valve.js","Valves.js","RandomImage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Valve","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newstate","_this","url","data","id","fetch","then","_","valves","reloadValves","_this2","react_default","a","createElement","state","onClick","switchValve","concat","last_opened_minutes_ago","last_opened_seconds_ago","React","Component","Valves","error","isLoaded","result","json","setState","_this3","_this$state","message","map","valve","key","src_Valve","RandomImage","randomImageUrl","loadRandomImage","console","log","offset","Math","floor","random","images","original","src","App","className","watering","class","src_Valves","src_RandomImage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8GCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qMCsCzBC,cAnCb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,6EAGIO,GAAU,IAAAC,EAAAL,KAChBM,EAAM,oDAAsDN,KAAKH,MAAMU,KAAKC,GAAK,UAEnFF,IADe,IAAbF,EACK,MAEA,OAETK,MAAMH,GACLI,KAAK,SAACC,GAAD,OACJN,EAAKR,MAAMe,OAAOC,kDAKb,IAAAC,EAAAd,KACP,OACEe,EAAAC,EAAAC,cAAA,WACGjB,KAAKH,MAAMU,KAAKW,MAAQ,KAAO,MAChCH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAML,EAAKM,aAAY,KAAxC,WAGAL,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAML,EAAKM,aAAY,KAAxC,YALF,gBAAAC,OAQmBrB,KAAKH,MAAMU,KAAKe,wBARnC,iBAAAD,OAQ0ErB,KAAKH,MAAMU,KAAKgB,wBAR1F,wBArBcC,IAAMC,WC0DXC,cAxDX,SAAAA,EAAY7B,GAAO,IAAAQ,EAAA,OAAAP,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,IACfrB,EAAAP,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KAAMH,KACDqB,MAAQ,CACXS,MAAO,KACPC,UAAU,EACVhB,OAAQ,MALKP,mFAUjBL,KAAKa,sDAGQ,IAAAC,EAAAd,KACbS,MAAM,oDAELC,KAAK,SAACmB,GAAD,OAAYA,EAAOC,SACxBpB,KAAK,SAACoB,GACHhB,EAAKiB,SAAS,CACZH,UAAU,EACVhB,OAAQkB,EAAKlB,UAMjB,SAACe,GACCb,EAAKiB,SAAS,CACZH,UAAU,EACVD,MAAOA,uCAON,IAAAK,EAAAhC,KAAAiC,EAC6BjC,KAAKkB,MAAjCS,EADDM,EACCN,MAAOC,EADRK,EACQL,SAAUhB,EADlBqB,EACkBrB,OACzB,OAAIe,EACKZ,EAAAC,EAAAC,cAAA,qBAAaU,EAAMO,SAChBN,EAIRb,EAAAC,EAAAC,cAAA,UACGL,EAAOuB,IAAI,SAAAC,GAAK,OACfrB,EAAAC,EAAAC,cAAA,MAAIoB,IAAKD,EAAM5B,IACbO,EAAAC,EAAAC,cAACqB,EAAD,CAAO/B,KAAQ6B,EAAOxB,OAAQoB,QAN/BjB,EAAAC,EAAAC,cAAA,gCA1CMO,IAAMC,WC8DZc,cA9Db,SAAAA,EAAY1C,GAAO,IAAAQ,EAAA,OAAAP,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACjBlC,EAAAP,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,KAAAH,KAAMH,KACDqB,MAAQ,CACTS,MAAO,KACPC,UAAU,EACVY,eAAgB,MALHnC,mFAUjBL,KAAKyC,4DAGW,IAAA3B,EAAAd,KAEhB0C,QAAQC,IAAI,QAEZ,IAGIC,EAASC,KAAKC,MAAsB,GAAhBD,KAAKE,UAIzBzC,EAAG,gDAAAe,OAPO,mCAOP,OAAAA,OANC,QAMD,WAAAA,OALK,EAKL,YAAAA,OAA2FuB,EAA3F,YAAAvB,OAHM,IAGN,UAAAA,OAFI,KAEJ,SAAAA,OADG,QAIVZ,MAAMH,GACHI,KAAK,SAACmB,GAAD,OAAYA,EAAOC,SACxBpB,KAAK,SAACoB,GACLY,QAAQC,IAAIb,EAAKvB,KAAK,GAAGyC,QACvBlC,EAAKiB,SAAS,CACZH,UAAU,EACVY,eAAgBV,EAAKvB,KAAK,GAAGyC,OAAOC,SAAS3C,OAMjD,SAACqB,GACCb,EAAKiB,SAAS,CACZH,UAAU,EACVD,MAAOA,uCASR,IAAAM,EACqCjC,KAAKkB,MAAxBsB,GADlBP,EACCN,MADDM,EACQL,SADRK,EACkBO,gBACzB,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKiC,IAAKV,YAxDQhB,IAAMC,WCkBjB0B,MAbf,WACE,OACEpC,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,OACbrC,EAAAC,EAAAC,cAAA,UAAQmC,UAAU,cAChBrC,EAAAC,EAAAC,cAAA,OAAKiC,IAAKG,IAAUC,MAAM,iBAC1BvC,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.5df24db1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/watering.76cf0a92.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass Valve extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  switchValve(newstate) {\n    let url = \"https://rosenhillgarden.pythonanywhere.com/valve/\" + this.props.data.id + \"/action\";\n    if (newstate === true) {\n      url += '/on';\n    } else {\n      url += '/off';\n    }\n    fetch(url)\n    .then((_) =>\n      this.props.valves.reloadValves()\n    );\n    \n  }\n  \n  render() {\n    return (\n      <div>\n        {this.props.data.state ? 'on' : 'off'}\n        <button onClick={() => this.switchValve(true)}>\n          Turn On\n        </button>\n        <button onClick={() => this.switchValve(false)}>\n          Turn Off\n        </button> \n        {`Last opened: ${this.props.data.last_opened_minutes_ago} minutes and ${this.props.data.last_opened_seconds_ago} seconds ago`}\n      </div>\n    );\n  }\n}\n\n\nexport default Valve;\n","import React from 'react';\nimport Valve from './Valve.js';\n\nclass Valves extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          valves: null\n        };\n    }\n\n    componentDidMount() {\n      this.reloadValves();\n    }\n\n    reloadValves() {\n      fetch(\"https://rosenhillgarden.pythonanywhere.com/valve\")\n      //.then(res => res.json())\n      .then((result) => result.json())\n      .then((json) => {\n          this.setState({\n            isLoaded: true,\n            valves: json.valves\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      )\n\n    }\n\n    render() {\n      const { error, isLoaded, valves } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <ul>\n            {valves.map(valve => (\n              <li key={valve.id}>\n                <Valve data = {valve} valves={this}/>\n              </li>\n            ))}\n\n          </ul>\n        );\n      }\n    }\n}\nexport default Valves;\n","import React from 'react';\n\nclass RandomImage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        error: null,\n        isLoaded: false,\n        randomImageUrl: null\n    };\n  }\n\n  componentDidMount() {\n    this.loadRandomImage();\n  }\n\n  loadRandomImage() {\n    \n    console.log(\"hejj\");\n    \n    let api_key = \"aFFKTuSMjd6j0wwjpFCPXZipQbcnw3vB\";\n    let q = \"water\";\n    let limit = 1;\n    let offset = Math.floor(Math.random() * 20);\n    let rating = \"g\";\n    let lang = \"en\";\n    let fmt = \"json\";\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=${api_key}&q=${q}&limit=${limit}&offset=${offset}&rating=${rating}&lang=${lang}&fmt=${fmt}`;\n    \n    \n    fetch(url)\n      .then((result) => result.json())\n      .then((json) => {\n        console.log(json.data[0].images);\n          this.setState({\n            isLoaded: true,\n            randomImageUrl: json.data[0].images.original.url\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n      \n\n  }\n\n  \n  render() {\n    const { error, isLoaded, randomImageUrl } = this.state;\n    return (\n      <div>\n        <img src={randomImageUrl} />\n      </div>\n    );\n  }\n}\n\n\nexport default RandomImage;\n","import React from 'react';\nimport logo from './logo.svg';\nimport watering from './watering.gif';\nimport './App.css';\nimport Valves from './Valves.js';\nimport RandomImage from './RandomImage.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={watering} class=\"App-watering\"/>\n        <Valves />\n        <RandomImage />\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}