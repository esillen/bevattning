{"version":3,"sources":["watering.gif","logo.svg","Components/Valve.js","Components/Valves.js","Components/RandomImage.js","Components/FlowerSensorCharts.js","Components/LastAccess.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Valve","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newstate","_this","url","data","id","password","action","fetch","headers","Accept","Content-Type","method","body","JSON","stringify","then","_","valves","reloadValves","content","_this2","state","react_default","a","createElement","onClick","switchValve","concat","last_opened_minutes_ago","last_opened_seconds_ago","last_closed_minutes_ago","last_closed_seconds_ago","React","Component","Valves","error","isLoaded","result","json","setState","_this3","_this$state","message","value","onChange","evt","updatePassword","target","map","valve","key","Components_Valve","RandomImage","randomImageUrl","loadRandomImage","console","log","offset","Math","floor","random","images","original","src","FlowerSensorCharts","reloadCharts","es6","width","height","type","dataKey","stroke","strokeDasharray","interval","LastAccess","health","reloadHealth","last_access_minutes","last_access_seconds","App","className","Components_LastAccess","watering","class","Components_Valves","Components_RandomImage","Components_FlowerSensorCharts","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce017f29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/watering.76cf0a92.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass Valve extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  switchValve(newstate) {\n    const url = \"https://rosenhillgarden.pythonanywhere.com/valve/\" + this.props.data.id;\n    const data = {password: this.props.password};\n    if (newstate === true) {\n      data.action = 'on';\n    } else {\n      data.action = 'off';\n    }\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: \"POST\",\n      body: JSON.stringify(data)\n    })\n    .then((_) =>\n      this.props.valves.reloadValves()\n    );\n    \n  }\n  \n  render() {\n    let content;\n\n    if (this.props.data.state) {\n      content = <div>\n        On\n        <button onClick={() => this.switchValve(false)}>\n          Turn Off\n        </button> \n        {`Last opened ${this.props.data.last_opened_minutes_ago} minutes and ${this.props.data.last_opened_seconds_ago} seconds ago`}\n      </div>\n    } else {\n      content = <div>\n        Off\n        <button onClick={() => this.switchValve(true)}>\n          Turn On\n        </button> \n        {`Last closed ${this.props.data.last_closed_minutes_ago} minutes and ${this.props.data.last_closed_seconds_ago} seconds ago`}\n      </div>\n    }\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n\nexport default Valve;\n","import React from 'react';\nimport Valve from './Valve.js';\n\nclass Valves extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          valves: null,\n          password: ''\n        };\n    }\n\n    componentDidMount() {\n      this.reloadValves();\n    }\n\n    reloadValves() {\n      fetch(\"https://rosenhillgarden.pythonanywhere.com/valve\")\n      //.then(res => res.json())\n      .then((result) => result.json())\n      .then((json) => {\n          this.setState({\n            isLoaded: true,\n            valves: json.valves\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      )\n    }\n\n    updatePassword(password) {\n      this.setState({password: password});\n    }\n\n    render() {\n      const { error, isLoaded, valves } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n          <ul>\n            <li>\n              Password: \n              <input value={this.state.password} onChange={evt => this.updatePassword(evt.target.value)}/>\n            </li>\n            {valves.map(valve => (\n              <li key={valve.id}>\n                <Valve data = {valve} valves={this} password = {this.state.password}/>\n              </li>\n            ))}\n\n          </ul>\n        );\n      }\n    }\n}\nexport default Valves;\n","import React from 'react';\n\nclass RandomImage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        error: null,\n        isLoaded: false,\n        randomImageUrl: null\n    };\n  }\n\n  componentDidMount() {\n    this.loadRandomImage();\n  }\n\n  loadRandomImage() {\n    \n    console.log(\"hejj\");\n    \n    let api_key = \"aFFKTuSMjd6j0wwjpFCPXZipQbcnw3vB\";\n    let q = \"water\";\n    let limit = 1;\n    let offset = Math.floor(Math.random() * 20);\n    let rating = \"g\";\n    let lang = \"en\";\n    let fmt = \"json\";\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=${api_key}&q=${q}&limit=${limit}&offset=${offset}&rating=${rating}&lang=${lang}&fmt=${fmt}`;\n    \n    \n    fetch(url)\n      .then((result) => result.json())\n      .then((json) => {\n        console.log(json.data[0].images);\n          this.setState({\n            isLoaded: true,\n            randomImageUrl: json.data[0].images.original.url\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      );\n      \n\n  }\n\n  \n  render() {\n    const { error, isLoaded, randomImageUrl } = this.state;\n    return (\n      <div>\n        <img src={randomImageUrl} />\n      </div>\n    );\n  }\n}\n\n\nexport default RandomImage;\n","import React from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Legend, Tooltip } from 'recharts';\n\nconst data = [{x: 1, y: 400}, {x:2, y: 500}];\n\nclass FlowerSensorCharts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      data: null\n    };\n}\n\ncomponentDidMount() {\n  this.reloadCharts();\n}\n\nreloadCharts() {\n  fetch(\"https://rosenhillgarden.pythonanywhere.com/miflora\")\n  //.then(res => res.json())\n  .then((result) => result.json())\n  .then((json) => {\n      this.setState({\n        isLoaded: true,\n        data: json\n      });\n    },\n    // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    (error) => {\n      this.setState({\n        isLoaded: true,\n        error: error\n      });\n    }\n  )\n\n}\n\n  render() {\n      const { error, isLoaded, data } = this.state;\n      if (error) {\n        return <div>Error Loading Charts: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading Charts...</div>;\n      } else {\n        return (\n          <div>\n          <LineChart width={600} height={300} data={data}>\n            <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#FF6347\" />\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis interval={9}/>\n            <YAxis />\n            <Legend />\n            <Tooltip />\n          </LineChart>\n          <LineChart width={600} height={300} data={data}>\n          <Line type=\"monotone\" dataKey=\"light\" stroke=\"#FFFF00\" />\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis interval={9}/>\n            <YAxis />\n            <Legend />\n            <Tooltip />\n          </LineChart>\n          <LineChart width={600} height={300} data={data}>\n            <Line type=\"monotone\" dataKey=\"moisture\" stroke=\"#FF6347\" />\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis interval={9}/>\n            <YAxis />\n            <Legend />\n            <Tooltip />\n          </LineChart>\n          <LineChart width={600} height={300} data={data}>\n            <Line type=\"monotone\" dataKey=\"battery\" stroke=\"#ADFF2F\" />\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis interval={9}/>\n            <YAxis />\n            <Legend />\n            <Tooltip />\n          </LineChart>\n          </div>\n        );\n      }\n  }\n\n}\n\n\nexport default FlowerSensorCharts;","import React from 'react';\n\nclass LastAccess extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          health: null\n        };\n    }\n\n    componentDidMount() {\n      this.reloadHealth();\n    }\n\n    reloadHealth() {\n      fetch(\n        \"https://rosenhillgarden.pythonanywhere.com/health\")\n      .then((result) => result.json())\n      .then((json) => {\n          this.setState({\n            isLoaded: true,\n            health: json\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      )\n\n    }\n\n    render() {\n      const { error, isLoaded, health } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading health...</div>;\n      } else {\n        return (\n          <div>System last heartbeat {`${health.last_access_minutes} minutes and ${health.last_access_seconds} seconds ago.`}</div>\n        );\n      }\n    }\n}\nexport default LastAccess;\n","import React from 'react';\nimport logo from './logo.svg';\nimport watering from './watering.gif';\nimport './App.css';\nimport Valves from './Components/Valves.js';\nimport RandomImage from './Components/RandomImage.js'\nimport FlowerSensorCharts from './Components/FlowerSensorCharts.js'\nimport LastAccess from './Components/LastAccess.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <LastAccess />\n        <img src={watering} class=\"App-watering\"/>\n        <Valves />\n        <RandomImage />\n        <FlowerSensorCharts />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}